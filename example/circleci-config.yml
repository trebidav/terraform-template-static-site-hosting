version: 2
jobs:
  build-dev:
    docker:
      - image: circleci/node:8.12.0-stretch-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Compile lingui
          command: yarn run lingui:compile
      - run:
          name: Build
          command: yarn run build
      - save_cache:
          key: build-{{ .Branch }}-{{ .Revision }}
          paths:
            - build
  build:
    docker:
      - image: circleci/node:8.12.0-stretch-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Define Environment Variables
          command: |
            touch .env.local
            echo 'REACT_APP_API_URI=https://api.carvago.com/' >> .env.local
            echo 'REACT_APP_OAUTH_CLIENT_ID=2_2blszwltef0gs8gsws444kkggggkgkgo04k4ccw84oksgoosgw' >> .env.local
            echo 'REACT_APP_OAUTH_CLIENT_SECRET=1jozafzd6n6s4gsokcwwk4s488gc40wsc4wo8wcgwkwoosok44' >> .env.local
            echo 'REACT_APP_IMAGE_URL=https://d1qlo6x0un72p1.cloudfront.net/' >> .env.local
            echo 'REACT_APP_PLATFORM_URL=https://carvago.com/' >> .env.local
            echo 'REACT_APP_EASY_ADMIN_URL=https://api.dev.carvago.utdigit.com/admin/' >> .env.local
      - run:
          name: Compile lingui
          command: yarn run lingui:compile
      - run:
          name: Build
          command: yarn run build
      - save_cache:
          key: build-{{ .Branch }}-{{ .Revision }}
          paths:
            - build
  deploy-dev:
    machine: true
    steps:
      - restore_cache:
          keys:
            - build-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Deploy to S3
          command: |
            _AWS_ACCOUNT_ID=AWS_ACCOUNT_ID_${CIRCLE_BRANCH}
            export AWS_ACCOUNT_ID=${!_AWS_ACCOUNT_ID}

            _AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID_${CIRCLE_BRANCH}
            export AWS_ACCESS_KEY_ID=${!_AWS_ACCESS_KEY_ID}

            _AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY_${CIRCLE_BRANCH}
            export AWS_SECRET_ACCESS_KEY=${!_AWS_SECRET_ACCESS_KEY}

            _AWS_DEFAULT_REGION=AWS_DEFAULT_REGION_${CIRCLE_BRANCH}
            export AWS_DEFAULT_REGION=${!_AWS_DEFAULT_REGION}

            S3_BUCKET=AWS_S3_BUCKET_${CIRCLE_BRANCH}

            aws s3 rm s3://${!S3_BUCKET} --recursive
            aws s3 cp --recursive --cache-control max-age=2592000 build/static s3://${!S3_BUCKET}/static
            aws s3 sync build s3://${!S3_BUCKET}
      - run:
          name: Invalidate cache
          command: |
            _AWS_ACCOUNT_ID=AWS_ACCOUNT_ID_${CIRCLE_BRANCH}
            export AWS_ACCOUNT_ID=${!_AWS_ACCOUNT_ID}

            _AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID_${CIRCLE_BRANCH}
            export AWS_ACCESS_KEY_ID=${!_AWS_ACCESS_KEY_ID}

            _AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY_${CIRCLE_BRANCH}
            export AWS_SECRET_ACCESS_KEY=${!_AWS_SECRET_ACCESS_KEY}

            _AWS_DEFAULT_REGION=AWS_DEFAULT_REGION_${CIRCLE_BRANCH}
            export AWS_DEFAULT_REGION=${!_AWS_DEFAULT_REGION}

            CLOUDFRONT_DISTIRBUTION=AWS_CLOUDFRONT_DISTIRBUTION_ID_${CIRCLE_BRANCH}
            aws cloudfront create-invalidation --distribution-id ${!CLOUDFRONT_DISTIRBUTION} --paths "/*"

  deploy:
    machine: true
    steps:
      - restore_cache:
          keys:
            - build-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Deploy to S3
          command: |
            _AWS_ACCOUNT_ID=AWS_ACCOUNT_ID_${CIRCLE_BRANCH}
            export AWS_ACCOUNT_ID=${!_AWS_ACCOUNT_ID}

            _AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID_${CIRCLE_BRANCH}
            export AWS_ACCESS_KEY_ID=${!_AWS_ACCESS_KEY_ID}

            _AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY_${CIRCLE_BRANCH}
            export AWS_SECRET_ACCESS_KEY=${!_AWS_SECRET_ACCESS_KEY}

            _AWS_DEFAULT_REGION=AWS_DEFAULT_REGION_${CIRCLE_BRANCH}
            export AWS_DEFAULT_REGION=${!_AWS_DEFAULT_REGION}

            S3_BUCKET=AWS_S3_BUCKET_${CIRCLE_BRANCH}

            aws s3 rm s3://${!S3_BUCKET} --recursive
            aws s3 cp --recursive --cache-control max-age=2592000 build/static s3://${!S3_BUCKET}/static
            aws s3 sync build s3://${!S3_BUCKET}
      - run:
          name: Invalidate cache
          command: |
            _AWS_ACCOUNT_ID=AWS_ACCOUNT_ID_${CIRCLE_BRANCH}
            export AWS_ACCOUNT_ID=${!_AWS_ACCOUNT_ID}

            _AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID_${CIRCLE_BRANCH}
            export AWS_ACCESS_KEY_ID=${!_AWS_ACCESS_KEY_ID}

            _AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY_${CIRCLE_BRANCH}
            export AWS_SECRET_ACCESS_KEY=${!_AWS_SECRET_ACCESS_KEY}

            _AWS_DEFAULT_REGION=AWS_DEFAULT_REGION_${CIRCLE_BRANCH}
            export AWS_DEFAULT_REGION=${!_AWS_DEFAULT_REGION}
            
            CLOUDFRONT_DISTIRBUTION=AWS_CLOUDFRONT_DISTIRBUTION_ID_${CIRCLE_BRANCH}
            aws cloudfront create-invalidation --distribution-id ${!CLOUDFRONT_DISTIRBUTION} --paths "/*"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-dev:
          filters:
            branches:
              only: deploy_dev
      - build:
          filters:
            branches:
              only: 
                - deploy_stage
                - deploy_prod
      - deploy-dev:
          requires:
            - build-dev
          filters:
            branches:
              only: deploy_dev
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: 
                - deploy_stage
                - deploy_prod

